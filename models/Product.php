<?php

namespace app\models;

use Yii;
use app\models\Category;

/**
 * This is the model class for table "products".
 *
 * @property int $id
 * @property int $cost
 * @property string $title
 * @property string $gender
 * @property string|null $brand
 * @property string|null $category
 * @property int|null $hidden
 * @property int|null $new
 * @property int|null $sale
 *
 * @property OrderItem[] $orderItems
 */
class Product extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'products';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['cost', 'title', 'gender'], 'required'],
            [['cost', 'hidden', 'new', 'sale'], 'integer'],
            [['title', 'gender', 'brand', 'category'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'cost' => 'Cost',
            'title' => 'Title',
            'gender' => 'Gender',
            'brand_id' => 'Brand',
            'category_id' => 'Category',
            'hidden' => 'Hidden',
            'new' => 'New',
            'sale' => 'Sale',
        ];
    }

    /**
     * Gets query for [[OrderItems]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getOrderItems()
    {
        return $this->hasMany(OrderItem::className(), ['product_id' => 'id']);
    }

    public function saveImage($filename)
    {
        $this->image = $filename;
        return $this->save(false);
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }
    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function showImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/images/no-image.png';
    }

    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if ($category != null)
        {
            $this->link('category', $category);
            return true;
        }

    }
}
